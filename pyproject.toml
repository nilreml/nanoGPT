[tool.pytest.ini_options]
testpaths = ["tests"]
#markers = ["flaky"]
#addopts = "--maxfail=1"

[tool.ruff]
# Ruff documentation       : https://docs.astral.sh/ruff
# Extension for VS Code    : https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff
# Extension for other IDEs : https://github.com/charliermarsh/ruff-lsp
# NOTE: disable pycodestyle, pydocstyle, bandit and flake8 linters in your IDE since ruff includes these
target-version = "py311"
line-length = 130
unsafe-fixes = true

[tool.ruff.lint]
# Linter rule documentation: https://docs.astral.sh/ruff/rules
pydocstyle.convention = "google"
mccabe.max-complexity = 10
flake8-unused-arguments.ignore-variadic-names = true # Ignore unused *args and **kwargs -> standard practice
select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "CPY",   # flake8-copyright
    "D",     # pydocstyle
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle Error
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRIO",  # flake8-trio
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle Warning
    "YTT",   # flake8-2020
]
ignore = [
    "ANN101", # Type annotations for "self" args -> deprecated
    "ANN102", # Type annotations for "cls" args -> deprecated
    "DJ",     # Disable Django linting -> unused
    "E501",   # Avoid linter errors for line length -> ruff-format handles line length as good as possible
    "G004",   # Allow logging statements using f-strings
    "ISC001", # Conflicts with COM812 -> prefer trailing commas over implicit string concatenation to reduce diff noise
    "TD002",  # Don't require author for TODOs
    "TRY002", # Allow descriptive exception messages without defining custom exception classes for now
    "TRY003", # Allow descriptive exception messages without defining custom exception classes for now
    # Ignored during refactor phase:
    "D",      # Allow missing docstrings
    "ANN001", # Allow missing param type annotations
    "ANN201", # Allow missing return type annotations
    "ANN206", # Allow missing return type annotations
    "A001",   # Allow shadowing built-in names
    "A002",   # Allow shadowing built-in names
    "ERA001", # Allow commented-out code
    "T201",   # Allow print statements
    "S101",   # Allow using assert statements
    "TD003",  # Allow TODOs without an issue number
    "FIX002", # Allow TODOs
]
unfixable = [
    "B",      # Autofixing bugbear findings is a bit too aggressive
    "ERA001", # Don"t remove commented-out code
    "F841",   # Autofixing unused variables conservatively leaves right-hand-side intact, which is almost always incorrect
    #"RUF",    # Autofixes for ruff-specific rules possibly too aggressive
    #"SIM", # Autofixes for flake8-simplify possibly too aggressive
    "TRY", # Autofixes for tryceratops possibly too aggressive
    "T20", # Autofixes for print statements confusing
]
fixable = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
    "ANN201", # Allow missing return type annotation in unit tests -> standard practice
    "D",      # Allow missing docstrings in unit tests -> standard practice
    "S101",   # Allow using assert statements in unit tests -> best practice
]
"__init__.py" = [
    "D104", # Allow missing docstring in __init__.py -> standard practice
]

[tool.ruff.lint.flake8-boolean-trap]
extend-allowed-calls = ["pydantic.Field", "pydantic.AllowInfNan"]

[tool.ruff.format]
# Documentation: https://docs.astral.sh/ruff/settings/#format
docstring-code-format = true
line-ending = "lf"
skip-magic-trailing-comma = false
